# -*- coding: utf-8 -*-
"""Stock_Market_Prediction_Using_LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lv49VQHHMO-9Fz8OaZmzSTxEYzzFJoYP

### Stock Market Prediction And Forecasting Using LSTM
"""

import pandas as pd
import numpy as np
import math
import numpy
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM
import tensorflow as tf
from numpy import array
import matplotlib.pyplot as plt

df=pd.read_csv('AAPL.csv') # Read the .csv File

df.head() # Display the first five rows of data

df.tail() # Display the last five Rows of dataFile

df.tail()

df.plot()   #plot a graph of all the data.

plt.show()

df1=df.reset_index()['high'] # Choose the high column for the prdeiction of stock prices.
                              # we can also choose any other value for the prediction of prices.
                              # all the values of high are in the df1

df1.shape  # Display the shape of data

plt.plot(df1) # Draw a graph for the up and down movements from 2017 to 2022

df1 #Display the vaule in  df1

# LSTM are sensitive to the scale of the data. so we apply MinMax scaler 
# Min Max convert the all values in range of 0 to 1
scaler=MinMaxScaler(feature_range=(0,1))
df1=scaler.fit_transform(np.array(df1).reshape(-1,1))

df1.shape

print(df1)

#splitting dataset into train and test split
#Where trainig size of data is 65% and test size of data is 35%
training_size=int(len(df1)*0.65)
test_size=len(df1)-training_size
train_data,test_data=df1[0:training_size,:],df1[training_size:len(df1),:1]

# total no of values in training size and test size
training_size,test_size

print(train_data,test_data)

# convert an array of values into a dataset matrix
def create_dataset(dataset, time_step=1):
	dataX, dataY = [], []
	for i in range(len(dataset)-time_step-1):
		a = dataset[i:(i+time_step), 0]   #i=0, 0,1,2,3-----99   100 
		dataX.append(a)										# 101 goes to data .append
		dataY.append(dataset[i + time_step, 0])
	return numpy.array(dataX), numpy.array(dataY)

# reshape into X=t,t+1,t+2,t+3 and Y=t+4
# time_step of data is 100 mean it takes 100 previous values to predict the next value.
time_step = 100
X_train, y_train = create_dataset(train_data, time_step)
X_test, ytest = create_dataset(test_data, time_step)

print(X_train.shape), print(y_train.shape)

print(X_test.shape), print(ytest.shape)

# reshape input to be [samples, time steps, features] which is required for LSTM
# convert a 2d data into 3d using reshape
X_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)
X_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)

#Create the Stacked LSTM model
model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(100,1)))
model.add(LSTM(50,return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss='mean_squared_error',optimizer='adam')

model.summary() # details of model.

# train the data using batch 64
hist=model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=100,batch_size=64,verbose=1)

#print the keys of dictionary that store the loss
print(hist.history.keys())

loss = pd.DataFrame(model.history.history)

#plot the losses during training
loss.plot()

# Lets Do the prediction and check performance metrics
train_predict=model.predict(X_train)
test_predict=model.predict(X_test)

print(train_predict)

#Transformback to original form
train_predict=scaler.inverse_transform(train_predict)
test_predict=scaler.inverse_transform(test_predict)

print(test_predict)

### Calculate Root Mean Square error performance metrics
math.sqrt(mean_squared_error(y_train,train_predict))

### Test Data Root Mean Square error
math.sqrt(mean_squared_error(ytest,test_predict))

### Plotting 
# shift train predictions for plotting
look_back=100
trainPredictPlot = numpy.empty_like(df1)
trainPredictPlot[:, :] = np.nan #Taking NaN values based on df1 for training.
trainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict
# shift test predictions for plotting
testPredictPlot = numpy.empty_like(df1)
testPredictPlot[:, :] = numpy.nan #Taking NaN values based on df1 for testing.
testPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict
# plot baseline and predictions
plt.plot(scaler.inverse_transform(df1))
plt.plot(trainPredictPlot)
plt.plot(testPredictPlot)
plt.show()

# where blue one is the actual dataset value,
# Yellow one are the training dataset values
# and Green one are testing values

# Training dataset graph
plt.plot(trainPredictPlot)

# Testing dataset graph
plt.plot(testPredictPlot)

# Actual dataset graph
plt.plot(scaler.inverse_transform(df1))

len(test_data)

x_input=test_data[341:].reshape(1,-1)
x_input.shape

temp_input=list(x_input)
temp_input=temp_input[0].tolist()

temp_input

"""# Weekly Prediction of Apple stock Market"""

# demonstrate prediction for next 7 days

lst_output=[]
n_steps=100
i=0
while(i<7): 
    
    if(len(temp_input)>100):
        #print(temp_input)
        x_input=np.array(temp_input[1:])
        print("{} day input {}".format(i,x_input))
        x_input=x_input.reshape(1,-1)
        x_input = x_input.reshape((1, n_steps, 1))
        #print(x_input)
        yhat = model.predict(x_input, verbose=0)
        print("{} day output {}".format(i,yhat))
        temp_input.extend(yhat[0].tolist())
        temp_input=temp_input[1:]
        #print(temp_input)
        lst_output.extend(yhat.tolist())
        i=i+1
    else:     # First this block is run because temp_input is not greater than 100
        x_input = x_input.reshape((1, n_steps,1))
        yhat = model.predict(x_input, verbose=0)
        print(yhat[0])
        temp_input.extend(yhat[0].tolist())
        print(len(temp_input))
        lst_output.extend(yhat.tolist())
        i=i+1
        # This else block predict the next day and after this if part execute.
    

print(lst_output)

day_new=np.arange(1,101) # taking previous 100 days
day_pred=np.arange(101,108)

# total length is 1258  we take values from 1158 because 100(days) values required to predict next(day) value.
plt.plot(day_new,scaler.inverse_transform(df1[1158:]))
plt.plot(day_pred,scaler.inverse_transform(lst_output))
# Yellow line predicts the next 7 day prediction.

df3=df1.tolist()
df3.extend(lst_output)
plt.plot(df3[1200:])

df3=scaler.inverse_transform(df3).tolist()

#full graph is given below:
plt.plot(df3)

"""# Monthly Prediction of Apple stock Market"""

# demonstrate prediction for next 30 days

lst_output=[]
n_steps=100
i=0
while(i<30): 
    
    if(len(temp_input)>100):
        #print(temp_input)
        x_input=np.array(temp_input[1:])
        print("{} day input {}".format(i,x_input))
        x_input=x_input.reshape(1,-1)
        x_input = x_input.reshape((1, n_steps, 1))
        #print(x_input)
        yhat = model.predict(x_input, verbose=0)
        print("{} day output {}".format(i,yhat))
        temp_input.extend(yhat[0].tolist())
        temp_input=temp_input[1:]
        #print(temp_input)
        lst_output.extend(yhat.tolist())
        i=i+1
    else:     # First this block is run because temp_input is not greater than 100
        x_input = x_input.reshape((1, n_steps,1))
        yhat = model.predict(x_input, verbose=0)
        print(yhat[0])
        temp_input.extend(yhat[0].tolist())
        print(len(temp_input))
        lst_output.extend(yhat.tolist())
        i=i+1
        # This else block predict the next day and after this if part execute.
    

print(lst_output)

day_new=np.arange(1,101) # taking previous 100 days
day_pred=np.arange(101,131)

len(df1)

# total length is 1258  we take values from 1158 because 100(days) values required to predict next(day) value.
plt.plot(day_new,scaler.inverse_transform(df1[1158:]))
plt.plot(day_pred,scaler.inverse_transform(lst_output))
# Yellow line predicts the next 30 day prediction.

df4=df1.tolist()
df4.extend(lst_output)
plt.plot(df4[1200:])

#Exend the graph by joining previous and prdicted one and it,s lokks good.

df4=scaler.inverse_transform(df4).tolist()

#full graph is given below:
plt.plot(df4)